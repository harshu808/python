# Example data: a matrix
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# Transpose the matrix using nested list comprehensions
transposed_matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]

# Flatten the matrix using nested list comprehensions
flattened_matrix = [element for row in matrix for element in row]

# Generate a list of squares for even numbers and cubes for odd numbers using nested comprehensions
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
squared_cubed_numbers = [[x**2 if x % 2 == 0 else x**3 for x in numbers]]

# Create a chessboard pattern using nested comprehensions
chessboard = [[(i + j) % 2 for i in range(8)] for j in range(8)]

# Print the results
print("Original Matrix:")
for row in matrix:
    print(row)

print("\nTransposed Matrix:")
for row in transposed_matrix:
    print(row)

print("\nFlattened Matrix:", flattened_matrix)

print("\nSquared/Cubed Numbers:")
for row in squared_cubed_numbers:
    print(row)

print("\nChessboard:")
for row in chessboard:
    print(row)


# We start with a 3x3 matrix and demonstrate various operations using nested list comprehensions.

# We transpose the matrix using a nested list comprehension, which swaps rows and columns.

# We flatten the matrix using a nested list comprehension, converting it into a 1D list.

# We generate a list of squares for even numbers and cubes for odd numbers using a nested list comprehension within a list.

# We create a chessboard pattern, where each cell contains 0 or 1, to represent a black and white pattern on an 8x8 board.

# We print the results to visualize the transformations applied to the data.
