# Create a dictionary of students' information
from collections import Counter
from collections import OrderedDict
from collections import defaultdict
students = {
    'Alice': {'age': 20, 'major': 'Computer Science', 'grades': [95, 88, 92]},
    'Bob': {'age': 22, 'major': 'Engineering', 'grades': [87, 90, 89]},
    'Charlie': {'age': 21, 'major': 'Mathematics', 'grades': [92, 91, 95]},
    'David': {'age': 23, 'major': 'Physics', 'grades': [85, 88, 86]},
    'Eve': {'age': 20, 'major': 'Biology', 'grades': [91, 93, 90]}
}

# Access information for a specific student
alice_info = students['Alice']
alice_age = alice_info['age']
alice_major = alice_info['major']
alice_grades = alice_info['grades']

# Add a new student to the dictionary
students['Frank'] = {'age': 24, 'major': 'Chemistry', 'grades': [89, 87, 92]}

# Modify information for an existing student
students['Bob']['major'] = 'Computer Science'
students['Charlie']['grades'].append(94)

# Check if a student is in the dictionary
is_student_in_dict = 'Eve' in students

# Remove a student from the dictionary
# Removes David and returns his information
removed_student = students.pop('David', None)

# Iterate over keys and values in the dictionary
for student_name, student_info in students.items():
    print(
        f"Name: {student_name}, Age: {student_info['age']}, Major: {student_info['major']}")

# Find the average grade for each student
average_grades = {name: sum(grades) / len(grades)
                  for name, info in students.items()}

# Create a dictionary with default values (Python 3.3+)
default_dict = defaultdict(int)
default_dict['key1'] += 1  # No KeyError if the key doesn't exist

# Merge two dictionaries (Python 3.9+)
dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}
merged_dict = {**dict1, **dict2}  # Merges dict2 into dict1

# Create a dictionary from two lists
names = ['Alice', 'Bob', 'Charlie']
ages = [20, 22, 21]
name_age_dict = dict(zip(names, ages))

# Check if all keys in one dictionary are present in another
is_subset = all(key in students for key in {'Alice', 'Bob'})

# Use a generator expression to create a dictionary
even_squares_dict = {x: x**2 for x in range(10) if x % 2 == 0}

# Create a dictionary with a custom order (Python 3.7+)
ordered_dict = OrderedDict([('b', 2), ('a', 1), ('c', 3)])

# Create a dictionary with immutable keys (e.g., tuples)
tuple_dict = {(1, 2): 'value1', (3, 4): 'value2'}

# Find the most common element in a list using a dictionary
my_list = [1, 2, 3, 2, 2, 3, 4, 5, 5, 5]
most_common_element = Counter(my_list).most_common(1)[0][0]

# Create a nested dictionary
nested_dict = {
    'person1': {'name': 'Alice', 'age': 25},
    'person2': {'name': 'Bob', 'age': 30}
}

# Access nested dictionary values
alice_age = nested_dict['person1']['age']

# Create a dictionary from a list of dictionaries
list_of_dicts = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]
dict_from_list = {entry['name']: entry['age'] for entry in list_of_dicts}
