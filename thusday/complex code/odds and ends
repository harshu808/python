# List comprehensions to generate a list of squares
squares = [x ** 2 for x in range(1, 11)]

# Lambda function to calculate the cube of a number


def cube(x): return x ** 3


# Using map and lambda to apply the cube function to a list
numbers = [1, 2, 3, 4, 5]
cubed_numbers = list(map(cube, numbers))

# Using a generator expression to find even numbers in a range
even_numbers = (x for x in range(1, 21) if x % 2 == 0)

# Dictionary comprehensions to create a dictionary of squares
square_dict = {x: x ** 2 for x in range(1, 6)}

# Sets to find unique elements in a list
fruits = ['apple', 'banana', 'cherry', 'apple', 'date', 'banana']
unique_fruits = set(fruits)

# Exception handling for dividing by zero
try:
    result = 10 / 0
except ZeroDivisionError:
    result = "Division by zero error"

# Working with None
empty_variable = None
if empty_variable is None:
    empty_variable = "This variable is empty"

# Using enumerate to get index and value in a loop
colors = ['red', 'green', 'blue']
for index, color in enumerate(colors, start=1):
    print(f"Color {index}: {color}")

# Slicing a list
numbers = [1, 2, 3, 4, 5]
subset = numbers[1:4]

# Checking membership with 'in' operator
if 'apple' in fruits:
    print("Found 'apple' in the list of fruits")

# The 'pass' statement to create a placeholder


def placeholder_function():
    pass


# Using 'with' statement for file handling
with open('sample.txt', 'w') as file:
    file.write("Hello, World!")

# Complex number operations
complex_num1 = 2 + 3j
complex_num2 = 1 - 2j
sum_complex = complex_num1 + complex_num2

# Using 'zip' to combine two lists into pairs
names = ['Alice', 'Bob', 'Charlie']
scores = [85, 92, 78]
student_data = dict(zip(names, scores))

# Displaying all the results
print("Squares:", squares)
print("Cubed Numbers:", cubed_numbers)
print("Even Numbers:", list(even_numbers))
print("Square Dictionary:", square_dict)
print("Unique Fruits:", unique_fruits)
print("Exception Handling Result:", result)
print("Empty Variable:", empty_variable)
print("Subset of Numbers:", subset)
print("Sum of Complex Numbers:", sum_complex)
print("Student Data:", student_data)
