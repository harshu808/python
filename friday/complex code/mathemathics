from scipy.optimize import fsolve
from scipy.integrate import quad
import matplotlib.pyplot as plt
import numpy as np
pip install numpy matplotlib


# Matrix Operations

def matrix_operations():
    A = np.array([[1, 2], [3, 4]])
    B = np.array([[5, 6], [7, 8]])
    result_addition = A + B
    result_multiplication = np.dot(A, B)
    print("Matrix Addition:")
    print(result_addition)
    print("Matrix Multiplication:")
    print(result_multiplication)

# Numerical Integration


def numerical_integration():
    def integrand(x):
        return x**2

    result, error = quad(integrand, 0, 1)
    print("Numerical Integration Result:", result)

# Solving Equations


def equation_solver():
    def equation(x):
        return x**2 - 4

    root = fsolve(equation, 0)
    print("Equation Solution:", root)

# Generating a Fractal (Mandelbrot Set)


def generate_mandelbrot_set():
    def mandelbrot(c, max_iterations=100):
        z = c
        for n in range(max_iterations):
            if abs(z) > 2:
                return n
            z = z * z + c
        return max_iterations

    resolution = 800
    x = np.linspace(-2, 2, resolution)
    y = np.linspace(-2, 2, resolution)
    fractal = np.empty((resolution, resolution))

    for i in range(resolution):
        for j in range(resolution):
            x_val, y_val = x[i], y[j]
            c = complex(x_val, y_val)
            fractal[i, j] = mandelbrot(c)

    plt.imshow(fractal, extent=(-2, 2, -2, 2))
    plt.colorbar()
    plt.title("Mandelbrot Set")
    plt.show()


if __name__ == "__main__":
    print("Matrix Operations:")
    matrix_operations()

    print("\nNumerical Integration:")
    numerical_integration()

    print("\nSolving Equations:")
    equation_solver()

    print("\nGenerating Mandelbrot Set:")
    generate_mandelbrot_set()
